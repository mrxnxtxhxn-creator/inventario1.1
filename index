<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Scanner de ID</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/@zxing/browser@latest/umd/zxing-browser.min.js"></script>
    <style>
        /* ...seu CSS permanece igual... */
    </style>
</head>
<body>
    <!-- ...seu HTML permanece igual... -->

    <script>
        const video = document.getElementById('video');
        const idListInput = document.getElementById('id-list-input');
        const feedbackOverlay = document.getElementById('feedback-overlay');
        const statusNotification = document.getElementById('status-notification');
        const lastScannedIdSpan = document.getElementById('last-scanned-id');
        let validIds = [];
        let lastScanTime = 0;
        const scanDelay = 3000;
        let codeReader = null;
        let stream = null;

        function updateIdList() {
            const idsText = idListInput.value.trim();
            validIds = idsText ? idsText.split(',').map(id => id.trim()).filter(id => id) : [];
        }

        idListInput.addEventListener('input', updateIdList);

        function showFeedback(status, message) {
            feedbackOverlay.style.backgroundColor = status === 'success' ? '#2ecc71' : '#e74c3c';
            feedbackOverlay.classList.add('active');
            statusNotification.textContent = message;
            statusNotification.classList.add('visible');
            if (status === 'success' && navigator.vibrate) {
                navigator.vibrate(200);
            }
            setTimeout(() => {
                feedbackOverlay.classList.remove('active');
                statusNotification.classList.remove('visible');
            }, scanDelay - 500);
        }

        async function startScanner() {
            if (!window.isSecureContext && location.hostname !== "localhost") {
                statusNotification.textContent = "A câmera só funciona em HTTPS ou localhost.";
                statusNotification.classList.add('visible');
                return;
            }
            if (!window.ZXingBrowser) {
                statusNotification.textContent = "Biblioteca ZXing não carregada.";
                statusNotification.classList.add('visible');
                return;
            }
            const hints = new Map();
            const formats = [
                ZXingBrowser.BarcodeFormat.CODE_128,
                ZXingBrowser.BarcodeFormat.EAN_13,
                ZXingBrowser.BarcodeFormat.CODE_39,
                ZXingBrowser.BarcodeFormat.QR_CODE,
                ZXingBrowser.BarcodeFormat.EAN_8,
                ZXingBrowser.BarcodeFormat.UPC_A,
                ZXingBrowser.BarcodeFormat.UPC_E,
            ];
            hints.set(2, formats);
            codeReader = new ZXingBrowser.BrowserMultiFormatReader(hints);

            try {
                await codeReader.decodeFromVideoDevice(undefined, video, (result, err) => {
                    if (result) {
                        const currentTime = Date.now();
                        if (currentTime - lastScanTime < scanDelay) return;
                        lastScanTime = currentTime;
                        const scannedId = result.getText();
                        lastScannedIdSpan.textContent = scannedId;
                        if (validIds.includes(scannedId)) {
                            showFeedback('success', `ID ENCONTRADO!\n${scannedId}`);
                        } else {
                            showFeedback('error', `NÃO ENCONTRADO\n${scannedId}`);
                        }
                    }
                    if (err) {
                        const errorMessage = String(err);
                        if (!errorMessage.includes('No MultiFormat Readers were able to detect the code')) {
                            // Mostra erro no console, mas não para o usuário
                            console.error("Erro de leitura:", err);
                        }
                    }
                });
            } catch (err) {
                console.error("Erro ao iniciar a câmera: ", err);
                statusNotification.textContent = "Erro ao iniciar a câmera. Permita o acesso e use HTTPS.";
                statusNotification.classList.add('visible');
            }
        }

        // Para o scanner ao sair da página
        window.addEventListener('beforeunload', () => {
            if (codeReader) codeReader.reset();
        });

        window.addEventListener('load', () => {
            updateIdList();
            startScanner();
        });
    </script>
</body>
</html>

