<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Scanner de ID com Histórico</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/html5-qrcode@2.3.8/html5-qrcode.min.js"></script>
    <style>
        body, html {
            margin: 0; padding: 0;
            height: 100%; width: 100%;
            overflow: hidden;
            background: #000;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }
        #reader {
            position: fixed; top: 0; left: 0;
            width: 100%; height: 100%;
            z-index: 1;
        }
        #reader video { width: 100% !important; height: 100% !important; object-fit: cover !important; }
        #reader__scan_region { border: 4px solid rgba(255, 255, 255, 0.7) !important; border-radius: 1.5rem; background: none !important; position: relative; }
        .scan-line {
            position: absolute; left: 5%; top: 0; width: 90%; height: 3px;
            background: #e74c3c; box-shadow: 0 0 10px #e74c3c, 0 0 20px #e74c3c;
            border-radius: 3px; animation: scan-animation 3s infinite cubic-bezier(0.5, 0, 0.5, 1);
        }
        @keyframes scan-animation {
            0% { transform: translateY(15px); }
            50% { transform: translateY(calc(100% - 25px)); }
            100% { transform: translateY(15px); }
        }
        #controls-panel {
            position: fixed; bottom: 0; left: 0; right: 0;
            z-index: 10;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            border-top-left-radius: 1.5rem;
            border-top-right-radius: 1.5rem;
            padding: 1rem 1.5rem 1.5rem 1.5rem;
            transition: transform 0.3s ease-in-out;
        }
        #feedback-overlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            z-index: 100;
            display: flex; flex-direction: column;
            align-items: center; justify-content: center;
            text-align: center; color: white;
            font-weight: 800;
            opacity: 0; pointer-events: none;
            transition: opacity 0.2s ease-in-out;
            backdrop-filter: blur(5px);
        }
        .tab-btn {
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-weight: 600;
            transition: background-color 0.2s;
        }
        .tab-active { background-color: #0891b2; color: white; }
        .tab-inactive { background-color: transparent; color: #a1a1aa; }
    </style>
</head>
<body>
    <div id="reader">
        <div class="scan-line"></div>
    </div>

    <div id="feedback-overlay"></div>

    <div id="controls-panel">
        <div class="w-full max-w-lg mx-auto">
            <div class="flex justify-center mb-4 space-x-2 border-b border-gray-700 pb-2">
                <button id="tab-procurar" class="tab-btn tab-active">Procurar</button>
                <button id="tab-encontrados" class="tab-btn tab-inactive">Encontrados (<span id="found-count">0</span>)</button>
            </div>
            
            <div id="view-procurar">
                <label for="id-list-input" class="block text-sm font-medium text-gray-200 mb-2 text-center">Cole os IDs para procurar (separados por vírgula):</label>
                <textarea id="id-list-input" rows="3" class="w-full p-3 border border-gray-600 rounded-lg bg-gray-800 text-white focus:ring-2 focus:ring-cyan-500" placeholder="8949461894921, 123456789, ..."></textarea>
            </div>

            <div id="view-encontrados" class="hidden max-h-40 overflow-y-auto pr-2">
                <ul id="found-list" class="space-y-2 text-center font-mono text-sm">
                    <li class="text-gray-400">Nenhum item encontrado ainda.</li>
                </ul>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const idListInput = document.getElementById('id-list-input');
            const feedbackOverlay = document.getElementById('feedback-overlay');
            const tabProcurar = document.getElementById('tab-procurar');
            const tabEncontrados = document.getElementById('tab-encontrados');
            const viewProcurar = document.getElementById('view-procurar');
            const viewEncontrados = document.getElementById('view-encontrados');
            const foundCountSpan = document.getElementById('found-count');
            const foundList = document.getElementById('found-list');
            
            let idsToFind = new Set();
            let foundIds = new Set();
            let isPaused = false;
            const SCAN_DELAY = 1000;
            let audioContext;

            function initAudio() {
                if (!audioContext) audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }
            document.body.addEventListener('click', initAudio, { once: true });
            document.body.addEventListener('touchstart', initAudio, { once: true });

            function playSound(type) {
                if (!audioContext) return;
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                oscillator.connect(gainNode); gainNode.connect(audioContext.destination);
                gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                if (type === 'success') {
                    oscillator.frequency.setValueAtTime(1200, audioContext.currentTime);
                    oscillator.type = 'sine';
                } else {
                    oscillator.frequency.setValueAtTime(180, audioContext.currentTime);
                    oscillator.type = 'square';
                }
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 0.12);
            }

            function updateIdList() {
                const idsText = idListInput.value.trim();
                idsToFind = new Set(idsText ? idsText.split(',').map(id => id.trim()).filter(id => id) : []);
                foundIds.clear();
                updateFoundListUI();
            }
            idListInput.addEventListener('input', updateIdList);
            updateIdList(); 

            function updateFoundListUI() {
                const foundIdsArray = Array.from(foundIds);
                foundCountSpan.textContent = foundIdsArray.length;
                if (foundIdsArray.length === 0) {
                    foundList.innerHTML = '<li class="text-gray-400">Nenhum item encontrado ainda.</li>';
                } else {
                    foundList.innerHTML = foundIdsArray.map(id => `<li class="p-2 bg-gray-700 rounded-md text-white">${id}</li>`).join('');
                }
            }

            function showFeedback(status, scannedId, messageOverride) {
                isPaused = true;
                const message = messageOverride || (status === 'success' ? 'ENCONTRADO' : 'NÃO ENCONTRADO');
                feedbackOverlay.style.backgroundColor = status === 'success' ? 'rgba(46, 204, 113, 0.9)' : (status === 'warning' ? 'rgba(245, 158, 11, 0.9)' : 'rgba(231, 76, 60, 0.9)');
                feedbackOverlay.innerHTML = `<div style="font-size: 4rem;">${message}</div><div style="font-size: 1.5rem; margin-top: 1rem; font-weight: 500; background: rgba(0,0,0,0.2); padding: 5px 15px; border-radius: 10px;">${scannedId}</div>`;
                feedbackOverlay.style.opacity = '1';
                
                playSound(status);
                if (status === 'success' && navigator.vibrate) navigator.vibrate(150);

                setTimeout(() => {
                    feedbackOverlay.style.opacity = '0';
                    isPaused = false;
                }, SCAN_DELAY);
            }

            tabProcurar.addEventListener('click', () => {
                tabProcurar.classList.replace('tab-inactive', 'tab-active');
                tabEncontrados.classList.replace('tab-active', 'tab-inactive');
                viewProcurar.classList.remove('hidden');
                viewEncontrados.classList.add('hidden');
            });
             tabEncontrados.addEventListener('click', () => {
                tabEncontrados.classList.replace('tab-inactive', 'tab-active');
                tabProcurar.classList.replace('tab-active', 'tab-inactive');
                viewEncontrados.classList.remove('hidden');
                viewProcurar.classList.add('hidden');
            });

            const html5QrCode = new Html5Qrcode("reader");

            const onScanSuccess = (decodedText) => {
                if (isPaused) return;
                const scannedId = decodedText;

                if (idsToFind.has(scannedId)) {
                    showFeedback('success', scannedId);
                    idsToFind.delete(scannedId); // Sai da lista de procura
                    foundIds.add(scannedId);
                    updateFoundListUI();
                } else if (foundIds.has(scannedId)) {
                    showFeedback('warning', scannedId, 'JÁ ENCONTRADO');
                } else {
                    showFeedback('error', scannedId);
                }
            };

            const config = {
                fps: 10,
                qrbox: (w, h) => { const s = Math.min(w, h) * 0.7; return { width: s, height: s * 0.5 }; },
                supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA],
                formatsToSupport: [ 
                    Html5QrcodeSupportedFormats.CODE_128,
                    Html5QrcodeSupportedFormats.EAN_13,
                    Html5QrcodeSupportedFormats.CODE_39
                ]
            };

            html5QrCode.start({ facingMode: "environment" }, config, onScanSuccess, (error) => {})
                .catch(err => {
                    console.error("Não foi possível iniciar o leitor de código de barras.", err);
                    alert("ERRO AO INICIAR A CÂMARA: Por favor, verifique se deu permissão de acesso à câmara no seu navegador.");
                });
        });
    </script>
</body>
</html>

